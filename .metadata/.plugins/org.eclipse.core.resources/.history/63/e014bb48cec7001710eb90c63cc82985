package ver1.ui;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;

public class GraphEdge {
	private static final Color COL_LINE = Color.BLUE;
	private static final Color COL_FONT = Color.BLACK;
	private static final Color COL_HL = Color.YELLOW;
	private static final String SEP = ", ";
	private static final Font FONT = new Font(Font.MONOSPACED, Font.PLAIN, 16);
	private static final int STD_MARGIN = 5;
	
	private GraphAxiom[] relations;
	private Point pos1, pos2;
	private Color colLine, colFont, colHL;
	private Font font;
	
	public GraphEdge(String[] relations, Point pos1, Point pos2) {
		// TODO set relations, and positions with arg
		// set default color
		this.relations = new GraphAxiom[relations.length];
		int i = 0;
		for (String s : relations) 
			this.relations[i++] = new GraphAxiom(s);
		
		this.pos1 = pos1;
		this.pos2 = pos2;
		
		this.colLine = COL_LINE;
		this.colFont = COL_FONT;
		this.colHL = COL_HL;
		
		this.font = FONT;
	}
	
	public void paint(Graphics g) {
		Graphics2D g2d = (Graphics2D)g;
		g2d.setFont(font);
		FontMetrics fm = g2d.getFontMetrics();
		
		// Draw line
		g2d.setPaint(colLine);
		g2d.drawLine(pos1.x, pos1.y, pos2.x, pos2.y);
		
		// Get relations text and highlighting, if any
		String text = "";
		int offset = -1, width = -1; // offset respect the String beginning and the width of highlighted axiom, if any
		for (int i = 0; i < relations.length; i++) {
			//if (i == 1) {
			if (relations[i].isHighligthed()) {
				width = fm.stringWidth(relations[i].getText());
				offset = fm.stringWidth(text);
			}
			
			text += relations[i].getText() + (i+1 < relations.length ? SEP : "");;
		}
		
		// Locate text
		
		
		// If some relation is highlighted
		if (offset != -1 && width != -1) {
			g2d.setPaint(colHL);
			g2d.fillRect(xCursor, yCursor, fm.stringWidth(axioms[i].getText()), fontHeight);
		}
		// Write each line
		g2d.setPaint(colFont);
		for (String line : text.split("\n")) {
			g2d.drawString(line, position.x+STD_MARGIN, position.y+height+fontHeight);
			height += fontHeight;
		}
	}
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
 */

package ver1;

import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

import javax.swing.JOptionPane;

import ownapi.*;
import ver1.Operation.OPERATOR;
import ver1.util.*;

public class Tableau {
	private Set<OWNAxiom> K;
	private byte nodeCode;
	private TreeNode firstNode;
	private Map<Node, LinkedHashSet<OWNAxiom>> Ln;
	private Map<Pair<Node, Node>, HashSet<OWNAtom>> Lr;
	private Map<Node, HashSet<Operation>> operations;
	private Set<Node> blockedNodes;
	private Map<Node, Node> predecessor;
	private boolean clashed, clashConsequenceNDO, finished;
	private Backtracker backtracker;
	private UserSaveState uss; // Starts with all the states as the initial state
	private boolean modeGUI;
	
	// Auxiliary string with the status
	private String currentStatus = "";
	public void clearStatus() {
		currentStatus = "";
	}
	public String stringStatus() {
		return currentStatus;
	}
	
	public Tableau(HashSet<OWNAxiom> K, boolean modeGUI) {
		this.K = K;
		nodeCode = 109; // ASCII m
		this.firstNode = new TreeNode(new Node(Character.toString((char)nodeCode++)));
		Ln = new HashMap<Node, LinkedHashSet<OWNAxiom>>();
		Lr = new HashMap<Pair<Node, Node>, HashSet<OWNAtom>>();
		operations = new HashMap<Node, HashSet<Operation>>();
		blockedNodes = new HashSet<Node>();
		predecessor = new HashMap<Node, Node>();
		clashed = false;
		clashConsequenceNDO = false;
		finished = false;
		backtracker = new Backtracker();
		uss = new UserSaveState();
		this.modeGUI = modeGUI;
	}
	
	public void init(OWNAxiom concept) {
		// Add first node with initial concept to L
		Ln.put(firstNode.getData(), new LinkedHashSet<OWNAxiom>());
		Ln.get(firstNode.getData()).add(concept);
		// Add null predecessor
		predecessor.put(firstNode.getData(), null);
		// Get operations for firstNode
		operations.put(firstNode.getData(), new HashSet<Operation>());
		updateOperations(firstNode);
		// Save initial state to all user saved states to avoid loading a null state
		for (int i = 0; i < UserSaveState.NUM_STATES; i++) {
			uss.saveState(this, i);
		}
	}
	
	///////////////////////
	/////   GETTERS   /////
	///////////////////////
	public Set<OWNAxiom> getOntology() {
		return K;
	}
	
	public TreeNode getFirstNode() {
		return firstNode;
	}
	
	/**
	 * Checks which would be the ID of the next created node
	 * @return
	 */
	public String checkNextCreatedNode() {
		return Character.toString((char)nodeCode);
	}
	
	public Map<Node, HashSet<Operation>> getOperations() {
		return operations;
	}
	
	public Set<OWNAxiom> getAxioms(Node n) {
		return ((HashSet<OWNAxiom>)Ln.get(n));
	}
	
	public Set<OWNAtom> getRelations(Node pred, Node succ) {
		return Lr.get(new Pair<Node, Node>(pred, succ));
	}
	
	
	//////////////////////////////
	/////   PUBLIC METHODS   /////
	//////////////////////////////
	public void apply(Node n, Operation op) {
		Node updatedNode = null;
		// Assumed that operator will be one of the cases, so an operation
		// will always be applied and updatedNode won't remain null
		// Trackers are not updated for TOP and BOTTOM because these operations 
		// do not come from a NDO
		switch (op.getOperator()) {
			case TOP: {
				((HashSet<OWNAxiom>)Ln.get(n)).add(op.getOperand1());
				updatedNode = n;
				break;
			}
			case BOTTOM: {
				((HashSet<OWNAxiom>)Ln.get(n)).add(OWNAxiom.BOTTOM);
				// If there aren't snapshots to backtrack to, and BOTTOM operation
				// is applied, then the tableau expansion clashed
				// If there are snapshots, check if the clash is a consequence from
				// the last non deterministic operation applied
				if (backtracker.thereAreSnapshots()) {
					// Check if the atom is tracked
					boolean atomTracked = backtracker.isAxiomTracked(n, op.getOperand1());
					// Check if the complement is tracked
					boolean complementTracked = backtracker.isAxiomTracked(n, op.getOperand2());
					// If the atom or the complement are tracked, then the clash
					// is consequence of a NDO, which is selected
					if (clashConsequenceNDO = atomTracked || complementTracked)
						backtracker.selectCauseOfClash(n, op.getOperand1(), op.getOperand2());
				}
				updatedNode = n;
				clashed = true;
				break;
			}
			case AND: {
				OWNConjunction conjunction = (OWNConjunction)op.getOperand1();
				boolean op1Added = ((HashSet<OWNAxiom>)Ln.get(n)).add(conjunction.getOperand1());
				boolean op2Added = ((HashSet<OWNAxiom>)Ln.get(n)).add(conjunction.getOperand2());
				updatedNode = n;
				// Update trackers
				if (op1Added && !op2Added)
					backtracker.updateTrackers(n, conjunction, updatedNode, conjunction.getOperand1());
				else if (!op1Added && op2Added)
					backtracker.updateTrackers(n, conjunction, updatedNode, conjunction.getOperand2());
				else if (op1Added && op2Added)
					backtracker.updateTrackers(n, conjunction, updatedNode, conjunction.getOperand1(), conjunction.getOperand2());
				break;
			}
			case OR: {
				// Save current state
				backtracker.takeSnapshot(new NonDeterministicOperation(n, op), this);
				boolean opAdded = ((HashSet<OWNAxiom>)Ln.get(n)).add(op.getResult());
				updatedNode = n;
				// Update trackers
				if (opAdded)
					backtracker.updateTrackers(n, op.getOperand1(), updatedNode, op.getResult());
				break;
			}
			case SOME: {
				OWNExistential existential = (OWNExistential)op.getOperand1();
				TreeNode tn = TreeNode.getTreeNode(firstNode, n);
				// Creation of new node
				Node newNode = new Node(Character.toString((char)nodeCode++));
				tn.addChild(newNode);
				predecessor.put(newNode, n);
				Ln.put(newNode, new LinkedHashSet<OWNAxiom>());
				Pair<Node, Node> p = new Pair<Node, Node>(n, newNode);
				Lr.put(p, new LinkedHashSet<OWNAtom>());
				operations.put(newNode, new HashSet<Operation>());
				// Apply operation
				Lr.get(p).add(existential.getRelation());
				boolean opAdded = Ln.get(newNode).add(existential.getOperand());
				updatedNode = newNode;
				// Update trackers
				if (opAdded)
					backtracker.updateTrackers(n, existential, updatedNode, existential.getOperand());
				break;
			}
			case ONLY: {
				OWNUniversal universal = (OWNUniversal)op.getOperand1();
				boolean opAdded = ((HashSet<OWNAxiom>)Ln.get(op.getNode())).add(universal.getOperand());
				updatedNode = op.getNode();
				// Update trackers
				if (opAdded)
					backtracker.updateTrackers(n, universal, updatedNode, universal.getOperand());
				break;
			}
		}
		
		// Check blocking of updatedNode and all its successors 
		iterativePreorder(TreeNode.getTreeNode(firstNode, updatedNode), "checkBlocking");
		//checkBlocking(updatedNode);
		
		updateAllOperations();
	}
	
	public boolean isBlocked(Node n) {
		return blockedNodes.contains(n);
	}
	
	public boolean isFinished() {
		if (clashed && clashConsequenceNDO) {
			if (backtracker.thereAreSnapshots()) {
				// If GUI mode, inform of backtracking effects
				Pair<NonDeterministicOperation, Snapshot> p = backtracker.getCauseOfClash();
				if (modeGUI) {
					// Get differences from snapshot and current state
					String nodesRemoved = "- Nodes removed: ";
					String msg = "There has been a clash, consequence of the non deterministic operation " +
							p.getFirst() + ".\nRecovering prior state with the following changes:\n";
					for (Node key : Ln.keySet()) {
						// If snapshot contains node, check for modifications; else, mark it as removed
						if (p.getSecond().getLn().containsKey(key)) {
							// Check if L(key) has changed
							if (!((HashSet<OWNAxiom>)Ln.get(key)).equals(((HashSet<OWNAxiom>)p.getSecond().getLn().get(key))))
								msg += "- L(" + key.getId() + ") changes to " + p.getSecond().getLn().get(key) +".\n";
						} else {
							nodesRemoved += key.getId() + ", ";
						}
					}
					msg += nodesRemoved.substring(0, nodesRemoved.length()-2);
					JOptionPane.showMessageDialog(null, msg);
				}
				// Recover
				recoverFromSnapshot(p.getSecond(), true);
			}
		}
		// Traverse all nodes and check if finished still true after traversal
		finished = true;
		iterativePreorder(firstNode, "checkFinished");
		return finished;
	}
	
	public boolean isSatisfiable() {
		return finished && !clashed;
	}
	
	public void saveState(int state) {
		uss.saveState(this, state);
	}
	
	public void loadState(int state) {
		recoverFromSnapshot(uss.loadState(state), false);
	}
	
	
	/////////////////////////////////
	/////   PROTECTED METHODS   /////
	/////////////////////////////////
	protected byte getNodeCode() {
		return nodeCode;
	}
	
	protected Map<Node, LinkedHashSet<OWNAxiom>> getLn() {
		return Ln;
	}
	
	protected Map<Pair<Node, Node>, HashSet<OWNAtom>> getLr() {
		return Lr;
	}
	
	protected Set<Node> getBlockedNodes() {
		return blockedNodes;
	}
	
	protected Map<Node, Node> getPredecessor() {
		return predecessor;
	}
	
	protected Backtracker getBacktracker() {
		return backtracker;
	}
	
	protected boolean getClashed() {
		return clashed;
	}
	
	protected boolean getFinished() {
		return finished;
	}
	
	
	///////////////////////////////////////////////////
	/////   TREE TRAVERSAL AND VISITING METHODS   /////
	///////////////////////////////////////////////////
	/**
	 * Use string to indicate the visiting method to avoid all
	 * the overhead required to pass a function as argument
	 * @param treeNode
	 * @param method
	 */
	public void iterativePreorder(TreeNode treeNode, String method)  {
		Stack<TreeNode> s = new Stack<TreeNode>();
		s.push(treeNode);
		while (!s.isEmpty()) {
			TreeNode n = s.pop();
			switch(method) {
				case "printNodeStatus":
					printNodeStatus(n);
					break;
				case "stringNodeStatus":
					stringNodeStatus(n);
					break;
				case "updateOperations":
					updateOperations(n);
					break;
				case "markAsBlocked":
					markAsBlocked(n);
					break;
				case "checkBlocking":
					checkBlocking(n.getData());
					break;
				case "checkFinished":
					checkFinished(n);
					break;
			}
			if (!n.getChildren().isEmpty()) {
				for (TreeNode succ : n.getChildren()) {
					s.push(succ);
				}
			}
		}
	}
	
	private void printNodeStatus(TreeNode n) {
		System.out.println(n.getData().getId() + 
				(blockedNodes.contains(n.getData()) ? "[blocked]" : "") +
				" : " + getAxioms(n.getData()).toString());
		if (!n.getChildren().isEmpty()) {
			for (TreeNode succ : n.getChildren()) {
				System.out.println(n.getData().getId() + "--" + 
						getRelations(n.getData(), succ.getData()) + 
						"--" + succ.getData().getId());
			}
		}
	}
	
	private void stringNodeStatus(TreeNode n) {
		currentStatus += n.getData().getId() + 
				(blockedNodes.contains(n.getData()) ? "[blocked]" : "") +
				" : " + getAxioms(n.getData()) + "\n";
		if (!n.getChildren().isEmpty()) {
			for (TreeNode succ : n.getChildren()) {
				currentStatus += n.getData().getId() + "--" + 
						getRelations(n.getData(), succ.getData()) + 
						"--" + succ.getData().getId() + "\n";
			}
		}
	}
	
	private void markAsBlocked(TreeNode n) {
		blockedNodes.add(n.getData());
	}
	
	/**
	 * Checks if n is finished. Then ands it to global finished
	 * Global finished starts true and it will become false, and will remain as it,
	 * as soon as some n is not finished
	 * @param n
	 */
	private void checkFinished(TreeNode n) {
		// clashed OR (n has no more operations OR is blocked) OR n contains Bottom
		boolean tmpFinished = clashed ||
				(operations.get(n.getData()).isEmpty() || 
						blockedNodes.contains(n.getData()) || 
						((HashSet<OWNAxiom>)Ln.get(n.getData())).contains(OWNAxiom.BOTTOM));
		finished &= tmpFinished;		
	}
	
	public int numLeaves(TreeNode treeNode) {
		int leaves = 0;
		Stack<TreeNode> s = new Stack<TreeNode>();
		s.push(treeNode);
		while (!s.isEmpty()) {
			TreeNode n = s.pop();
			if (!n.getChildren().isEmpty()) {
				for (TreeNode succ : n.getChildren()) {
					s.push(succ);
				}
			} else {
				leaves++;
			}
		}
		return leaves;
	}
	
	
	///////////////////////////////
	/////   PRIVATE METHODS   /////
	///////////////////////////////
	// Fills operations with the possible operations applicable to node 
	private void updateOperations(TreeNode tn) {
		Node n = tn.getData();
		// Reset operations set
		operations.get(n).clear();
		// If n hasn't clashed and it's not blocked
		//if (!((HashSet<OWNAxiom>)Ln.get(n)).contains(OWNAxiom.BOTTOM) && !blockedNodes.contains(n)) {
		// OR if n hasn't clashed (can keep operating even if it's blocked)
		// ((HashSet<OWNAxiom>)Ln.get(n)) cannot be directly applied because it throws 
		// java.lang.ClassCastException: java.util.HashSet cannot be cast to java.util.LinkedHashSet
		if (!((HashSet<OWNAxiom>)((HashSet<OWNAxiom>)Ln.get(n))).contains(OWNAxiom.BOTTOM)) {
			// Add all applicable TOP rules
			for (OWNAxiom axiom : K) {
				if (!((HashSet<OWNAxiom>)((HashSet<OWNAxiom>)Ln.get(n))).contains(axiom))
					operations.get(n).add(new Operation(OPERATOR.TOP, axiom));
			}

			// Iterate over all axioms in node
			for (OWNAxiom axiom : (HashSet<OWNAxiom>)((HashSet<OWNAxiom>)Ln.get(n))) {
				OWNAxiomOperationVisitor visitor = 
						new OWNAxiomOperationVisitor(tn, Ln, Lr, backtracker.getAppliedNDOs());
				axiom.accept(visitor);
				operations.get(n).addAll(visitor.getOperations());
			}
		}
	}
	
	// Tree traversal to get all operations in all nodes
	private void updateAllOperations() {
		iterativePreorder(firstNode, "updateOperations");
	}
	
	/**
	 * Check if updatedNode becomes directly or indirectly blocked by some predecessor
	 * @param updatedNode
	 */
	private void checkBlocking(Node updatedNode) {
		if (updatedNode == null)
			return;
		// Check all predecessors for indirect blocking
		Node pred = predecessor.get(updatedNode);
		boolean blocked = false;
		// Check until there are no more predecessors or the updated node is blocked
		while (pred != null && !blocked) {
			// If L(updatedNode) is a subset of L(parent) or the predecessor is blocked
			if (((HashSet<OWNAxiom>)Ln.get(pred)).containsAll((HashSet<OWNAxiom>)Ln.get(updatedNode)) || blockedNodes.contains(pred)) {
				// If GUI mode, dialog informing of blocking if node wasn't blocked before
				if (modeGUI && !blockedNodes.contains(updatedNode)) {
					JOptionPane.showMessageDialog(null, "Node " + updatedNode.getId() + 
							" has become blocked by node " + pred.getId() + ".");
				}
				blockedNodes.add(updatedNode);
				blocked = true;
			} else {
				pred = predecessor.get(pred);
			}
		}
		// If the updated node was previously blocked and it's not blocked anymore
		if (!blocked && blockedNodes.contains(updatedNode)) {
			blockedNodes.remove(updatedNode);
			if (modeGUI) {
				JOptionPane.showMessageDialog(null, "Node " + updatedNode.getId() + 
						" has become unblocked.");
			}
		}
	}
	
	private void recoverFromSnapshot(Snapshot snapshot, boolean backtracking) {
		// Recover
		nodeCode = snapshot.getNodeCode();
		firstNode = snapshot.getFirstNode().copy();
		Ln = DeepClone.deepClone(snapshot.getLn());
		Lr = DeepClone.deepClone(snapshot.getLr());
		operations = DeepClone.deepClone(snapshot.getOperations());
		blockedNodes = DeepClone.deepClone(snapshot.getBlockedNodes());
		predecessor = DeepClone.deepClone(snapshot.getPredecessor());
		if (!backtracking)
			backtracker = snapshot.getBacktracker().copy();
		clashed = snapshot.getClashed();
		finished = snapshot.getFinished();
		// Reload operations
		updateAllOperations();
	}
}
